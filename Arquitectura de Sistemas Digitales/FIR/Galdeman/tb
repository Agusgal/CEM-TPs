`timescale 1ns/1ps

module tb_top;
    reg                tb_rst;
    reg                tb_clk;
    reg  signed [15:0] tb_x;
    reg                tb_x_new;
    wire signed [15:0] tb_y;
    wire               tb_y_new;

    // Generación de reloj
    always #50 tb_clk = ~tb_clk;

    // ----------------------------
    integer k;
    integer error_count = 0;
    reg signed [15:0] expected_coef [0:15];

    initial begin
        // Inicialización
        tb_clk   = 0;
        tb_rst   = 1;
        tb_x     = 0;
        tb_x_new = 0;

        // Carga de coeficientes esperados (los del módulo fir)
        expected_coef[0]  = -16'sd2252;
        expected_coef[1]  = -16'sd1122;
        expected_coef[2]  =  16'sd11766;
        expected_coef[3]  = -16'sd2078;
        expected_coef[4]  = -16'sd19172;
        expected_coef[5]  = -16'sd29478;
        expected_coef[6]  = -16'sd24139;
        expected_coef[7]  = -16'sd31030;
        expected_coef[8]  = -16'sd8972;
        expected_coef[9]  = -16'sd10017;
        expected_coef[10] =  16'sd26388;
        expected_coef[11] = -16'sd28439;
        expected_coef[12] =  16'sd5400;
        expected_coef[13] = -16'sd20942;
        expected_coef[14] = -16'sd13089;
        expected_coef[15] = -16'sd29834;

        $dumpfile("fir_out.vcd");
        $dumpvars(0, tb_top);

        // Reset
        repeat (4) @(negedge tb_clk);
        tb_rst = 0;

        // ---------- impulso + 15 ceros ----------
        for (k = 0; k < 16; k = k + 1) begin
            @(negedge tb_clk);
            tb_x     = (k == 0) ? 16'sd32767 : 16'sd0;
            tb_x_new = 1'b1;
            @(negedge tb_clk);
            tb_x_new = 1'b0;
            repeat (16) @(negedge tb_clk);
        end

        // esperar salida = 0 (16 ciclos más con entrada 0)
        for (k = 0; k < 16; k = k + 1) begin
            @(negedge tb_clk);
            tb_x     = 16'sd0;
            tb_x_new = 1'b1;
            @(negedge tb_clk);
            tb_x_new = 1'b0;
            repeat (16) @(negedge tb_clk);
        end


       // respuesta al escalón (20 muestras de 32767)
        for (k = 0; k < 20; k = k + 1) begin
            @(negedge tb_clk);
            tb_x     = 16'sd32767;
            tb_x_new = 1'b1;
            @(negedge tb_clk);
            tb_x_new = 1'b0;
            repeat (16) @(negedge tb_clk);
        end

        // espera final
        repeat (10) @(negedge tb_clk);

        $display("\n==== Resultados ====");
        if (error_count == 0)
            $display("✅ Todas las salidas fueron correctas.");
        else
            $display("❌ Se encontraron %0d errores.", error_count);

        $finish;
    end

    // Instancia del DUT
    fir dut (
        .rst   (tb_rst),
        .clk   (tb_clk),
        .x     (tb_x),
        .x_new (tb_x_new),
        .y     (tb_y),
        .y_new (tb_y_new)
    );

        // Verificación en tiempo de simulación
    integer i = 0;
    reg signed [31:0] step_sum;

    always @(posedge tb_clk) begin
        if (tb_y_new) begin
            $display("t=%0t | y = %d", $time, tb_y);

            if (i < 16) begin
                if (tb_y !== expected_coef[i]) begin
                    $display("❌ Mismatch en coef[%0d]: esperado = %d, obtenido = %d", i, expected_coef[i], tb_y);
                    error_count = error_count + 1;
                end
            end else if (i < 16 + 5) begin
                // chequeo de salida nula
                if (tb_y !== 16'sd0) begin
                    $display("❌ Esperaba y=0 pero obtuve y=%d en t=%0t", tb_y, $time);
                    error_count = error_count + 1;
                end
            end else begin
                // Respuesta al escalón (verificamos que no hay overflow)
                step_sum = tb_y;
                if (step_sum > 32767 || step_sum < -32768) begin
                    $display("❌ OVERFLOW: y=%d fuera de rango en t=%0t", tb_y, $time);
                    error_count = error_count + 1;
                end
            end

            i = i + 1;
        end
    end
endmodule